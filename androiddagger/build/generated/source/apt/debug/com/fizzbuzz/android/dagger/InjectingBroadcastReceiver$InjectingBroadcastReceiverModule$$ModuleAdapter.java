// Code generated by dagger-compiler.  Do not edit.
package com.fizzbuzz.android.dagger;

import dagger.internal.BindingsGroup;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class InjectingBroadcastReceiver$InjectingBroadcastReceiverModule$$ModuleAdapter extends ModuleAdapter<InjectingBroadcastReceiver.InjectingBroadcastReceiverModule> {
  private static final String[] INJECTS = { };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public InjectingBroadcastReceiver$InjectingBroadcastReceiverModule$$ModuleAdapter() {
    super(com.fizzbuzz.android.dagger.InjectingBroadcastReceiver.InjectingBroadcastReceiverModule.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, true /*complete*/, true /*library*/);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, InjectingBroadcastReceiver.InjectingBroadcastReceiverModule module) {
    bindings.contributeProvidesBinding("@com.fizzbuzz.android.dagger.InjectingBroadcastReceiver$InjectingBroadcastReceiverModule$BroadcastReceiver()/android.content.Context", new ProvideBroadcastReceiverContextProvidesAdapter(module));
    bindings.contributeProvidesBinding("android.content.BroadcastReceiver", new ProvideBroadcastReceiverProvidesAdapter(module));
    bindings.contributeProvidesBinding("@com.fizzbuzz.android.dagger.InjectingBroadcastReceiver$InjectingBroadcastReceiverModule$BroadcastReceiver()/com.fizzbuzz.android.dagger.Injector", new ProvideBroadcastReceiverInjectorProvidesAdapter(module));
  }

  /**
   * A {@code Binding<android.content.Context>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<android.content.Context>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideBroadcastReceiverContextProvidesAdapter extends ProvidesBinding<android.content.Context>
      implements Provider<android.content.Context> {
    private final InjectingBroadcastReceiver.InjectingBroadcastReceiverModule module;

    public ProvideBroadcastReceiverContextProvidesAdapter(InjectingBroadcastReceiver.InjectingBroadcastReceiverModule module) {
      super("@com.fizzbuzz.android.dagger.InjectingBroadcastReceiver$InjectingBroadcastReceiverModule$BroadcastReceiver()/android.content.Context", IS_SINGLETON, "com.fizzbuzz.android.dagger.InjectingBroadcastReceiver.InjectingBroadcastReceiverModule", "provideBroadcastReceiverContext");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.content.Context>}.
     */
    @Override
    public android.content.Context get() {
      return module.provideBroadcastReceiverContext();
    }
  }

  /**
   * A {@code Binding<android.content.BroadcastReceiver>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<android.content.BroadcastReceiver>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideBroadcastReceiverProvidesAdapter extends ProvidesBinding<android.content.BroadcastReceiver>
      implements Provider<android.content.BroadcastReceiver> {
    private final InjectingBroadcastReceiver.InjectingBroadcastReceiverModule module;

    public ProvideBroadcastReceiverProvidesAdapter(InjectingBroadcastReceiver.InjectingBroadcastReceiverModule module) {
      super("android.content.BroadcastReceiver", IS_SINGLETON, "com.fizzbuzz.android.dagger.InjectingBroadcastReceiver.InjectingBroadcastReceiverModule", "provideBroadcastReceiver");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.content.BroadcastReceiver>}.
     */
    @Override
    public android.content.BroadcastReceiver get() {
      return module.provideBroadcastReceiver();
    }
  }

  /**
   * A {@code Binding<com.fizzbuzz.android.dagger.Injector>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<com.fizzbuzz.android.dagger.Injector>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideBroadcastReceiverInjectorProvidesAdapter extends ProvidesBinding<Injector>
      implements Provider<Injector> {
    private final InjectingBroadcastReceiver.InjectingBroadcastReceiverModule module;

    public ProvideBroadcastReceiverInjectorProvidesAdapter(InjectingBroadcastReceiver.InjectingBroadcastReceiverModule module) {
      super("@com.fizzbuzz.android.dagger.InjectingBroadcastReceiver$InjectingBroadcastReceiverModule$BroadcastReceiver()/com.fizzbuzz.android.dagger.Injector", IS_SINGLETON, "com.fizzbuzz.android.dagger.InjectingBroadcastReceiver.InjectingBroadcastReceiverModule", "provideBroadcastReceiverInjector");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.fizzbuzz.android.dagger.Injector>}.
     */
    @Override
    public Injector get() {
      return module.provideBroadcastReceiverInjector();
    }
  }
}
