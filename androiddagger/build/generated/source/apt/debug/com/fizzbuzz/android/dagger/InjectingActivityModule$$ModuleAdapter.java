// Code generated by dagger-compiler.  Do not edit.
package com.fizzbuzz.android.dagger;

import dagger.internal.BindingsGroup;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class InjectingActivityModule$$ModuleAdapter extends ModuleAdapter<InjectingActivityModule> {
  private static final String[] INJECTS = { };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public InjectingActivityModule$$ModuleAdapter() {
    super(com.fizzbuzz.android.dagger.InjectingActivityModule.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, true /*complete*/, true /*library*/);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, InjectingActivityModule module) {
    bindings.contributeProvidesBinding("@com.fizzbuzz.android.dagger.InjectingActivityModule$Activity()/android.content.Context", new ProvideActivityContextProvidesAdapter(module));
    bindings.contributeProvidesBinding("android.app.Activity", new ProvideActivityProvidesAdapter(module));
    bindings.contributeProvidesBinding("@com.fizzbuzz.android.dagger.InjectingActivityModule$Activity()/com.fizzbuzz.android.dagger.Injector", new ProvideActivityInjectorProvidesAdapter(module));
  }

  /**
   * A {@code Binding<android.content.Context>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<android.content.Context>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideActivityContextProvidesAdapter extends ProvidesBinding<android.content.Context>
      implements Provider<android.content.Context> {
    private final InjectingActivityModule module;

    public ProvideActivityContextProvidesAdapter(InjectingActivityModule module) {
      super("@com.fizzbuzz.android.dagger.InjectingActivityModule$Activity()/android.content.Context", IS_SINGLETON, "com.fizzbuzz.android.dagger.InjectingActivityModule", "provideActivityContext");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.content.Context>}.
     */
    @Override
    public android.content.Context get() {
      return module.provideActivityContext();
    }
  }

  /**
   * A {@code Binding<android.app.Activity>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<android.app.Activity>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideActivityProvidesAdapter extends ProvidesBinding<android.app.Activity>
      implements Provider<android.app.Activity> {
    private final InjectingActivityModule module;

    public ProvideActivityProvidesAdapter(InjectingActivityModule module) {
      super("android.app.Activity", NOT_SINGLETON, "com.fizzbuzz.android.dagger.InjectingActivityModule", "provideActivity");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.app.Activity>}.
     */
    @Override
    public android.app.Activity get() {
      return module.provideActivity();
    }
  }

  /**
   * A {@code Binding<com.fizzbuzz.android.dagger.Injector>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<com.fizzbuzz.android.dagger.Injector>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideActivityInjectorProvidesAdapter extends ProvidesBinding<Injector>
      implements Provider<Injector> {
    private final InjectingActivityModule module;

    public ProvideActivityInjectorProvidesAdapter(InjectingActivityModule module) {
      super("@com.fizzbuzz.android.dagger.InjectingActivityModule$Activity()/com.fizzbuzz.android.dagger.Injector", NOT_SINGLETON, "com.fizzbuzz.android.dagger.InjectingActivityModule", "provideActivityInjector");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.fizzbuzz.android.dagger.Injector>}.
     */
    @Override
    public Injector get() {
      return module.provideActivityInjector();
    }
  }
}
