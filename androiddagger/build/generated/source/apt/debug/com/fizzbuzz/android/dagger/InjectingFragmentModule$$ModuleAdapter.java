// Code generated by dagger-compiler.  Do not edit.
package com.fizzbuzz.android.dagger;

import dagger.internal.BindingsGroup;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class InjectingFragmentModule$$ModuleAdapter extends ModuleAdapter<InjectingFragmentModule> {
  private static final String[] INJECTS = { };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public InjectingFragmentModule$$ModuleAdapter() {
    super(com.fizzbuzz.android.dagger.InjectingFragmentModule.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, true /*complete*/, true /*library*/);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, InjectingFragmentModule module) {
    bindings.contributeProvidesBinding("android.support.v4.app.Fragment", new ProvideFragmentProvidesAdapter(module));
    bindings.contributeProvidesBinding("@com.fizzbuzz.android.dagger.InjectingFragmentModule$Fragment()/com.fizzbuzz.android.dagger.Injector", new ProvideFragmentInjectorProvidesAdapter(module));
  }

  /**
   * A {@code Binding<android.support.v4.app.Fragment>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<android.support.v4.app.Fragment>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideFragmentProvidesAdapter extends ProvidesBinding<android.support.v4.app.Fragment>
      implements Provider<android.support.v4.app.Fragment> {
    private final InjectingFragmentModule module;

    public ProvideFragmentProvidesAdapter(InjectingFragmentModule module) {
      super("android.support.v4.app.Fragment", NOT_SINGLETON, "com.fizzbuzz.android.dagger.InjectingFragmentModule", "provideFragment");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.support.v4.app.Fragment>}.
     */
    @Override
    public android.support.v4.app.Fragment get() {
      return module.provideFragment();
    }
  }

  /**
   * A {@code Binding<com.fizzbuzz.android.dagger.Injector>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<com.fizzbuzz.android.dagger.Injector>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideFragmentInjectorProvidesAdapter extends ProvidesBinding<Injector>
      implements Provider<Injector> {
    private final InjectingFragmentModule module;

    public ProvideFragmentInjectorProvidesAdapter(InjectingFragmentModule module) {
      super("@com.fizzbuzz.android.dagger.InjectingFragmentModule$Fragment()/com.fizzbuzz.android.dagger.Injector", NOT_SINGLETON, "com.fizzbuzz.android.dagger.InjectingFragmentModule", "provideFragmentInjector");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.fizzbuzz.android.dagger.Injector>}.
     */
    @Override
    public Injector get() {
      return module.provideFragmentInjector();
    }
  }
}
